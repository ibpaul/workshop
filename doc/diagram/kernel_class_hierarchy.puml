@startuml

abstract IKernel<T> {
    virtual & at(x, y)
    virtual size_t sizeN()
    virtual size_t sizeM()
}

class KernelFast<T,N,M> {
    Fastest filter processing.
    Size set at compile-time.
    ---
    {field} w : T[N][M] // weights
}

class Kernel<T> {
    Slower filter processing.
    Size set at run-time.
}

class KernelEigen<T> {
    Data structures from the Eigen
    library are used.
}

IKernel <|-- KernelFast
IKernel <|-- Kernel
IKernel <|-- KernelEigen


class global {
    convolute(IKernel&)
    convolute(KernelFast<T,N,M>&)

    gaussian(IKernel&)
}



@enduml
