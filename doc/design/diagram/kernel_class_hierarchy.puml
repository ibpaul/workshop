@startuml

abstract IKernel<T> {
    virtual T& at(m, n)
    virtual const T& at(m, n) const
    virtual size_t size_m() const
    virtual size_t size_n() const
}

class KernelFast<T,M,N> {
    Fastest filter processing.
    Size set at compile-time.
    ---
    {field} w : T[M][N] // weights
}

class Kernel<T> {
    Slower filter processing.
    Size set at run-time.
    ---
    ctor(size_t m, size_t n)
    ---
    - w : unique_ptr<T[]>
}

package "Eigen Library" {
    class MatrixXd
}

class KernelEigen<T> {
    Data structures from the Eigen
    library are used.
    ---
    ctor(m, n)
    ---
    w : MatrixXd
}


IKernel <|-- KernelFast
IKernel <|-- Kernel
IKernel <|-- KernelEigen


class global {
    convolute(IKernel&)
    convolute(KernelFast<T,M,N>&)

    load_gaussian(IKernel&)
}



@enduml
