@startuml

class FilterFactory {
    Creates runnable objects composed
    of kernel and processing function.
    ---
    create(string spec) : IFilter*
}

abstract IFilter {
    Holds a kernel and process function.
    ---
    void process(...)
}

class FilterFast<T,M,N> {
    Wraps a KernelFast object.
    Fastest filter option.
    ---
    ctor(FilterFast*, process*)
    ---
    {field} _kernel : FastKernel*
    {field} _process : void (*)(...)
}

class Filter<T> {
    General filter holding an IKernel object.
    ---
    ctor(IFilter*, process*)
    ---
    {field} _kernel : IKernel*
    {field} _process : void (*)(...)
}


IFilter <|-- FilterFast
IFilter <|-- Filter


class global {
    convolute(IKernel&)
    convolute(KernelFast<T,M,N>&)

    load_gaussian(IKernel&)
}



@enduml
